<?xml version="1.0" encoding="UTF-8"?>
<project name="extension-ant-build" default="help">

    <description>
        LeapMotionAS3 is the AS3 framework for working with the Leap.
        This set of tasks allows you to rebuild the ANE &amp; run the Sample, and more.
    </description>

    <target name="help">
        <echo message="run ant -p to see a list of available targets" />
    </target>

	<property file="build.properties"/>

	<condition property="isMac">
        <os family="mac"/>
    </condition>
    <condition property="isWindows">
        <os family="windows"/>
    </condition>

	<dirname property="Extension.BUILD_ROOT" file="${ant.file.extension-ant-build}"/>

	<property name="Extension.NATIVE_BIN_ROOT" value="${Extension.BUILD_ROOT}/../native/bin" />
	<property name="Extension.AS3_ROOT" value="${Extension.BUILD_ROOT}/../src"/>
	<property name="Extension.BIN_ROOT" location="${Extension.BUILD_ROOT}/../bin"/>
	<property name="Extension.AIR_CERTIFICATE_ROOT" location="${Extension.BIN_ROOT}/cert"/>
	<property name="Extension.TMP_ROOT" value="${Extension.BUILD_ROOT}/tmp"/>

	<dirname property="Examples.BUILD_ROOT" file="${ant.file.extension-ant-build}"/>

	<property name="Examples.AS3_ROOT" value="${Examples.BUILD_ROOT}/../src-examples"/>
	<property name="Examples.LIBS_ROOT" location="${Examples.BUILD_ROOT}/../libs"/>
	<property name="Examples.DEBUG_ROOT" location="${Examples.BUILD_ROOT}/../bin-debug"/>
	<property name="Examples.DEBUG_EXTENSIONS_ROOT" location="${Examples.DEBUG_ROOT}/extensions"/>
	<property name="Examples.RELEASE_ROOT" location="${Examples.BUILD_ROOT}/../bin-release"/>
	<property name="Examples.RELEASE_EXTENSIONS_ROOT" location="${Examples.RELEASE_ROOT}/extensions"/>
	<property name="Examples.AIR_CERTIFICATE_ROOT" location="${Examples.RELEASE_ROOT}/cert"/>
	<property name="Examples.TMP_ROOT" value="${Examples.BUILD_ROOT}/tmp"/>

	<property name="Examples.MAIN_SRC_DESCRIPTOR" value="${Examples.BUILD_ROOT}/app.xml"/>

    <property name="Examples.MAIN_DEBUG_DESCRIPTOR" value="${Examples.DEBUG_ROOT}/app.xml"/>
    <property name="Examples.MAIN_RELEASE_DESCRIPTOR" value="${Examples.RELEASE_ROOT}/app.xml"/>

	<target name="docs" description="Generate the ASDocs to /docs">
        <exec executable="${ASC1_AIR_SDK_HOME}/bin/aasdoc" failonerror="true">
            <arg line="-doc-sources ${Extension.AS3_ROOT}" />
            <arg value="-window-title" />
            <arg value="LeapMotionAS3" />

			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.callbacks.DefaultCallback" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.util.Base64Encoder" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.util.IntUtil" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.util.Quaternion" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.util.SHA1" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.interfaces.ILeapCallback" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.interfaces.ILeapConnection" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.native.LeapNative" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.socket.LeapSocket" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.socket.LeapSocketFrame" />
			<arg value="-exclude-classes" />
			<arg value="com.leapmotion.leap.events.LeapEvent" />

        	<arg value="-output" />
            <arg value="${Extension.BUILD_ROOT}/../docs" />
        </exec>
        <echo>Documentation created successfully.</echo>
	</target>
	
	<target name="config-sdk-extension" depends="init-ant-contrib">
        <if>
            <equals arg1="${Extension.ASC_VERSION}" arg2="2"/>
            <then>
                <property name="Extension.AIR_SDK_HOME" value="${ASC2_AIR_SDK_HOME}"/>
                <property name="Extension.AIR_SDK_VERSION" value="${ASC2_AIR_SDK_VERSION}"/>
                <property name="Extension.OUTPUT_NAME" value="${Extension.EXTENSION_NAME}-asc2" />
            </then>
            <else>
                <property name="Extension.AIR_SDK_HOME" value="${ASC1_AIR_SDK_HOME}"/>
                <property name="Extension.AIR_SDK_VERSION" value="${ASC1_AIR_SDK_VERSION}"/>
                <property name="Extension.OUTPUT_NAME" value="${Extension.EXTENSION_NAME}" />
            </else>
        </if>
		<property name="FLEX_HOME" value="${Extension.AIR_SDK_HOME}"/>
		<taskdef resource="flexTasks.tasks" classpath="${Extension.AIR_SDK_HOME}/ant/lib/flexTasks.jar" />
		<property name="Flex.ADT" value="${Extension.AIR_SDK_HOME}/lib/adt.jar"/>
	</target>

	<target name="config-sdk-examples" depends="init-ant-contrib">
        <if>
            <equals arg1="${Examples.ASC_VERSION}" arg2="2"/>
            <then>
                <property name="Examples.AIR_SDK_HOME" value="${ASC2_AIR_SDK_HOME}"/>
                <property name="Examples.AIR_SDK_VERSION" value="${ASC2_AIR_SDK_VERSION}"/>
                <property name="Flex.MXMLC" value="${Examples.AIR_SDK_HOME}/lib/mxmlc-cli.jar"/>
                <property name="Extension.OUTPUT_NAME" value="${Extension.EXTENSION_NAME}-asc2" />
            </then>
            <else>
                <property name="Examples.AIR_SDK_HOME" value="${ASC1_AIR_SDK_HOME}"/>
                <property name="Examples.AIR_SDK_VERSION" value="${ASC1_AIR_SDK_VERSION}"/>
                <property name="Flex.MXMLC" value="${Examples.AIR_SDK_HOME}/lib/mxmlc.jar"/>
                <property name="Extension.OUTPUT_NAME" value="${Extension.EXTENSION_NAME}" />
            </else>
        </if>
		<property name="FLEX_HOME" value="${Examples.AIR_SDK_HOME}"/>
		<taskdef resource="flexTasks.tasks" classpath="${Examples.AIR_SDK_HOME}/ant/lib/flexTasks.jar" />
		<property name="Flex.ADT" value="${Examples.AIR_SDK_HOME}/lib/adt.jar"/>
	</target>

    <target name="config-example" depends="init-ant-contrib">
        <property name="Examples.MAIN_SWF" value="${Examples.MAIN_NAME}.swf"/>
        <condition property="Examples.MAIN_IS_IN_SUBPACKAGE"> 
            <length string="${Examples.MAIN_PACKAGE}" when="gt" length="0" /> 
        </condition>
        <if>
            <equals arg1="${Examples.MAIN_IS_IN_SUBPACKAGE}" arg2="true"/>
            <then>
                <propertyregex property="Examples.MAIN_FOLDER_TMP" input="${Examples.MAIN_PACKAGE}" regexp="\." replace="/" global="true" />
                <property name="Examples.MAIN_FOLDER" value="${Examples.AS3_ROOT}/${Examples.MAIN_FOLDER_TMP}/"/>
            </then>
            <else>
                <property name="Examples.MAIN_FOLDER" value="${Examples.AS3_ROOT}/"/>
            </else>
        </if>
        <property name="Examples.MAIN_SRC_FILE"
              value="${Examples.MAIN_FOLDER}${Examples.MAIN_NAME}${Examples.MAIN_EXTENSION}"/>
    </target>

	<!-- GET ANT CONTRIB IF IT DOESNT EXIST -->
    <!-- task found on http://stackoverflow.com/questions/653552/how-to-install-ant-contrib-under-windows -->
    <available property="ant-contrib-exists" file="${ant.library.dir}/ant-contrib-1.0b3.jar"/>
    <target name="download-ant-contrib" unless="ant-contrib-exists">
        <mkdir dir="${ant.library.dir}"/>
        <get src="http://downloads.sourceforge.net/project/ant-contrib/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fant-contrib%2Ffiles%2Fant-contrib%2F1.0b3%2F&amp;use_mirror=cdnetworks-us-1"
             dest="${ant.library.dir}/ant-contrib-1.0b3-bin.zip" username="true"/>
        <unzip src="${ant.library.dir}/ant-contrib-1.0b3-bin.zip" dest="${ant.library.dir}" overwrite="no"/>
        <move todir="${ant.library.dir}">
            <fileset file="${ant.library.dir}/ant-contrib/*.jar"/>
            <fileset file="${ant.library.dir}/ant-contrib/lib/*.jar"/>
        </move>
        <delete file="${ant.library.dir}/ant-contrib-1.0b3-bin.zip"/>
        <delete dir="${ant.library.dir}/ant-contrib"/>
    </target>
    <target name="init-ant-contrib" depends="download-ant-contrib">
        <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ant.library.dir}/ant-contrib-1.0b3.jar"/>
    </target>

	<target name="clean-tmp-folder">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${Extension.TMP_ROOT}"/>
        </delete>
        <mkdir dir="${Extension.TMP_ROOT}"/>
    </target>

    <target name="clean-examples-debug-folder">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${Examples.DEBUG_ROOT}"/>
        </delete>
        <mkdir dir="${Examples.DEBUG_ROOT}"/>
    </target>

    <target name="clean-examples-release-folder">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${Examples.RELEASE_ROOT}"/>
        </delete>
        <mkdir dir="${Examples.RELEASE_ROOT}"/>
    </target>

	<target name="build-extension-swc">
		<compc output="${Extension.BIN_ROOT}/${Extension.OUTPUT_NAME}.swc">
			<load-config filename="${Extension.AIR_SDK_HOME}/frameworks/air-config.xml" />
			<include-sources file="${Extension.AS3_ROOT}/"/>
		</compc>
	</target>

	<target name="generate-extension-certificate">
		<mkdir dir="${Extension.AIR_CERTIFICATE_ROOT}"/>
		<java jar="${Flex.ADT}" fork="true">
			<arg value="-certificate"/>
			<arg value="-cn"/>
			<arg value="${Extension.AIR_CERTIFICATE_NAME}"/>
			<arg value="-ou"/>
			<arg value="${Extension.AIR_ORG_UNIT}"/>
			<arg value="-o"/>
			<arg value="${Extension.AIR_ORG_NAME}"/>
			<arg value="-c"/>
			<arg value="${Extension.AIR_COUNTRY}"/>
			<arg value="${Extension.AIR_KEY_TYPE}"/>
			<arg value="${Extension.AIR_CERTIFICATE_ROOT}/${Extension.AIR_CERTIFICATE_FILE}"/>
			<arg value="${Extension.AIR_CERTIFICATE_PASSWORD}"/>
		</java>
	</target>

	<target name="generate-examples-certificate">
		<mkdir dir="${Examples.AIR_CERTIFICATE_ROOT}"/>
		<java jar="${Flex.ADT}" fork="true">
			<arg value="-certificate"/>
			<arg value="-cn"/>
			<arg value="${Examples.AIR_CERTIFICATE_NAME}"/>
			<arg value="-ou"/>
			<arg value="${Examples.AIR_ORG_UNIT}"/>
			<arg value="-o"/>
			<arg value="${Examples.AIR_ORG_NAME}"/>
			<arg value="-c"/>
			<arg value="${Examples.AIR_COUNTRY}"/>
			<arg value="${Examples.AIR_KEY_TYPE}"/>
			<arg value="${Examples.AIR_CERTIFICATE_ROOT}/${Examples.AIR_CERTIFICATE_FILE}"/>
			<arg value="${Examples.AIR_CERTIFICATE_PASSWORD}"/>
		</java>
	</target>

	<target name="build-native-extension" depends="config-sdk-extension" description="Rebuilds the ANE &amp; SWC files">

		<antcall target="clean-tmp-folder" />
		<antcall target="build-extension-swc" />
		<antcall target="generate-extension-certificate" />
		<unzip src="${Extension.BIN_ROOT}/${Extension.OUTPUT_NAME}.swc" dest="${Extension.TMP_ROOT}"/>
		
		<!-- copy the mac framework to the tmp folder -->
		<copy todir="${Extension.TMP_ROOT}/${Extension.NATIVE_LIBRARY_OSX}">
			<fileset dir="${Extension.NATIVE_BIN_ROOT}/${Extension.NATIVE_LIBRARY_OSX}" />
		</copy>
		
		<!-- copy the windows dll to the tmp folder -->
		<copy todir="${Extension.TMP_ROOT}">
			<fileset file="${Extension.NATIVE_BIN_ROOT}/${Extension.NATIVE_LIBRARY_WINDOWS}" />
		</copy>
		
		<!-- copy the extension.xml to the tmp folder -->
		<copy todir="${Extension.TMP_ROOT}">
			<fileset file="${Extension.BUILD_ROOT}/extension.xml" />
		</copy>
		
		<!-- replace placeholders in the extension.xml -->
		<replace file="${Extension.TMP_ROOT}/extension.xml" token="NATIVE_LIBRARY_XMLNS" value="http://ns.adobe.com/air/extension/${Extension.AIR_SDK_VERSION}" />
        <replace file="${Extension.TMP_ROOT}/extension.xml" token="NATIVE_EXTENSION_ID" value="${Extension.ID}" />
		<replace file="${Extension.TMP_ROOT}/extension.xml" token="NATIVE_LIBRARY_WINDOWS" value="${Extension.NATIVE_LIBRARY_WINDOWS}" />
		<replace file="${Extension.TMP_ROOT}/extension.xml" token="NATIVE_LIBRARY_OSX" value="${Extension.NATIVE_LIBRARY_OSX}" />
		
		<java jar="${Flex.ADT}" fork="true" dir="${Extension.TMP_ROOT}" failonerror="true">
			<arg value="-package"/>
			<arg value="-storetype"/>
			<arg value="pkcs12"/>
			<arg value="-keystore"/>
			<arg value="${Extension.AIR_CERTIFICATE_ROOT}/${Extension.AIR_CERTIFICATE_FILE}"/>
			<arg value="-storepass"/>
			<arg value="${Extension.AIR_CERTIFICATE_PASSWORD}"/>
			<arg value="-tsa"/>
			<arg value="none"/>
			<arg value="-target"/>
			<arg value="ane"/>
			<arg value="${Extension.BIN_ROOT}/${Extension.OUTPUT_NAME}.ane"/>
			<arg value="extension.xml"/>
			<arg value="-swc"/>
			<arg value="${Extension.BIN_ROOT}/${Extension.OUTPUT_NAME}.swc"/>
			<arg value="-platform"/>
			<arg value="Windows-x86"/>
			<arg value="library.swf"/>
			<arg line="'${Extension.NATIVE_LIBRARY_WINDOWS}'"/>
			<arg value="-platform"/>
			<arg value="MacOS-x86"/>
			<arg value="library.swf"/>
			<arg line="'${Extension.NATIVE_LIBRARY_OSX}'"/>
		</java>
		<delete dir="${Extension.TMP_ROOT}"/>
		<delete dir="${Extension.AIR_CERTIFICATE_ROOT}"/>
	</target>

	<target name="list-external-libraries" depends="init-ant-contrib">
        <if>
            <equals arg1="${Examples.ASC_VERSION}" arg2="2"/>
            <then>
                <property name="excluded-library" value="${Extension.EXTENSION_NAME}" />
            </then>
            <else>
                <property name="excluded-library" value="${Extension.EXTENSION_NAME}-asc2" />
            </else>
        </if>
        <pathconvert property="aneFiles" pathsep="' '" dirsep="/">
            <path>
                <fileset dir="${Extension.BIN_ROOT}" includes="**/*.ane" excludes="${excluded-library}.ane"/>
            </path>
        </pathconvert>
        <pathconvert property="swcFiles" pathsep="," dirsep="/">
            <path>
                <fileset dir="${Examples.LIBS_ROOT}" includes="**/*.swc" excludes="${excluded-library}.swc"/>
            </path>
        </pathconvert>
    </target>

    <target name="compile-debug-swf" depends="clean-examples-debug-folder, list-external-libraries, config-sdk-examples, config-example">

        <copy filtering="true" file="${Examples.MAIN_SRC_DESCRIPTOR}" tofile="${Examples.MAIN_DEBUG_DESCRIPTOR}"/>

        <replace file="${Examples.MAIN_DEBUG_DESCRIPTOR}" token="APPLICATION_XMLNS" value="http://ns.adobe.com/air/application/${Examples.AIR_SDK_VERSION}" />
        <replace file="${Examples.MAIN_DEBUG_DESCRIPTOR}" token="APPLICATION_NATIVE_EXTENSION_TAG" value="&lt;extensionID&gt;${Extension.ID}&lt;/extensionID&gt;" />
        
        <replace file="${Examples.MAIN_DEBUG_DESCRIPTOR}">
            <replacefilter token="APPLICATION_SWF"
                           value="${Examples.MAIN_SWF}"/>
        </replace>

        <if>
            <equals arg1="${Examples.ASC_VERSION}" arg2="2"/>
            <then>
                <java jar="${Flex.MXMLC}" fork="true" failonerror="true" maxmemory="256m">
                    <arg value="-debug=true"/>
                    <arg value="-load-config=${FLEX_HOME}/frameworks/air-config.xml"/>
                    <arg value="+flexlib=${FLEX_HOME}/frameworks"/>
                    <arg value="-advanced-telemetry=true"/>
                    <arg value="-external-library-path+=${aneFiles}"/>
                    <arg value="-library-path+=${swcFiles}"/>
                    <arg value="-source-path=${Examples.AS3_ROOT}"/>
                    <arg value="-file-specs=${Examples.MAIN_SRC_FILE}"/>
                    <arg value="-output=${Examples.DEBUG_ROOT}/${Examples.MAIN_SWF}"/>
                </java>
            </then>
            <else>
                <java jar="${Flex.MXMLC}" fork="true" failonerror="true" maxmemory="256m">
                    <arg value="-debug=true"/>
                    <arg value="-load-config=${FLEX_HOME}/frameworks/air-config.xml"/>
                    <arg value="+flexlib=${FLEX_HOME}/frameworks"/>
                    <arg value="-external-library-path+=${aneFiles}"/>
                    <arg value="-library-path+=${swcFiles}"/>
                    <arg value="-source-path=${Examples.AS3_ROOT}"/>
                    <arg value="-file-specs=${Examples.MAIN_SRC_FILE}"/>
                    <arg value="-output=${Examples.DEBUG_ROOT}/${Examples.MAIN_SWF}"/>
                </java>
            </else>
        </if>
    </target>

    <target name="unpack-native-extensions-debug" depends="init-ant-contrib">
        <if>
            <equals arg1="${Examples.ASC_VERSION}" arg2="2"/>
            <then>
                <property name="excluded-library" value="${Extension.EXTENSION_NAME}" />
            </then>
            <else>
                <property name="excluded-library" value="${Extension.EXTENSION_NAME}-asc2" />
            </else>
        </if>
        <for param="nativeExtensionFile">
            <path>
                <fileset dir="${Extension.BIN_ROOT}" includes="**/*.ane" excludes="${excluded-library}.ane"/>
            </path>
            <sequential>
                <propertyregex override="yes" property="nativeExtensionBaseName" input="@{nativeExtensionFile}"
                               regexp=".*[\\/]+([^\.]*)\.ane" replace="\1"/>
                <unzip src="@{nativeExtensionFile}"
                       dest="${Examples.DEBUG_EXTENSIONS_ROOT}/${nativeExtensionBaseName}.ane"/>
            </sequential>
        </for>
    </target>

    <target name="run-debug-swf" depends="compile-debug-swf, init-ant-contrib, unpack-native-extensions-debug" description="Runs the Sample.as in debug mode">
        <if>
            <equals arg1="${isWindows}" arg2="true"/>
            <then>
                <property name="ADL" value="${FLEX_HOME}/bin/adl.exe"/>
            </then>
            <else>
                <property name="ADL" value="${FLEX_HOME}/bin/adl"/>
            </else>
        </if>

        <exec executable="${ADL}">
            <arg value="${Examples.MAIN_DEBUG_DESCRIPTOR}"/>
            <arg value="-extdir"/>
            <arg value="${Examples.DEBUG_EXTENSIONS_ROOT}"/>
            <arg value="${Examples.DEBUG_ROOT}"/>
        </exec>
    </target>

    <target name="compile-debug-swf-socket" depends="init-ant-contrib, clean-examples-debug-folder, list-external-libraries, config-sdk-examples, config-example">

        <copy filtering="true" file="${Examples.MAIN_SRC_DESCRIPTOR}" tofile="${Examples.MAIN_DEBUG_DESCRIPTOR}"/>

        <replace file="${Examples.MAIN_DEBUG_DESCRIPTOR}" token="APPLICATION_XMLNS" value="http://ns.adobe.com/air/application/${Examples.AIR_SDK_VERSION}" />
        <replace file="${Examples.MAIN_DEBUG_DESCRIPTOR}" token="APPLICATION_NATIVE_EXTENSION_TAG" value="" />
        
        <replace file="${Examples.MAIN_DEBUG_DESCRIPTOR}">
            <replacefilter token="APPLICATION_SWF"
                           value="${Examples.MAIN_SWF}"/>
        </replace>

        <if>
            <equals arg1="${Examples.ASC_VERSION}" arg2="2"/>
            <then>
                <java jar="${Flex.MXMLC}" fork="true" failonerror="true" maxmemory="256m">
                    <arg value="-debug=true"/>
                    <arg value="-load-config=${FLEX_HOME}/frameworks/air-config.xml"/>
                    <arg value="+flexlib=${FLEX_HOME}/frameworks"/>
                    <arg value="-advanced-telemetry=true"/>
                    <arg value="-library-path+=${aneFiles}"/>
                    <arg value="-library-path+=${swcFiles}"/>
                    <arg value="-source-path=${Examples.AS3_ROOT}"/>
                    <arg value="-file-specs=${Examples.MAIN_SRC_FILE}"/>
                    <arg value="-output=${Examples.DEBUG_ROOT}/${Examples.MAIN_SWF}"/>
                </java>
            </then>
            <else>
                <java jar="${Flex.MXMLC}" fork="true" failonerror="true" maxmemory="256m">
                    <arg value="-debug=true"/>
                    <arg value="-load-config=${FLEX_HOME}/frameworks/air-config.xml"/>
                    <arg value="+flexlib=${FLEX_HOME}/frameworks"/>
                    <arg value="-library-path+=${aneFiles}"/>
                    <arg value="-library-path+=${swcFiles}"/>
                    <arg value="-source-path=${Examples.AS3_ROOT}"/>
                    <arg value="-file-specs=${Examples.MAIN_SRC_FILE}"/>
                    <arg value="-output=${Examples.DEBUG_ROOT}/${Examples.MAIN_SWF}"/>
                </java>
            </else>
        </if>
    </target>

    <target name="run-debug-swf-socket" depends="compile-debug-swf-socket, init-ant-contrib, unpack-native-extensions-debug" description="Runs the Sample.as in debug mode using socket fallback">
        <if>
            <equals arg1="${isWindows}" arg2="true"/>
            <then>
                <property name="ADL" value="${FLEX_HOME}/bin/adl.exe"/>
            </then>
            <else>
                <property name="ADL" value="${FLEX_HOME}/bin/adl"/>
            </else>
        </if>

        <exec executable="${ADL}">
            <arg value="${Examples.MAIN_DEBUG_DESCRIPTOR}"/>
            <arg value="${Examples.DEBUG_ROOT}"/>
        </exec>
    </target>

    <target name="compile-release-swf" depends="clean-examples-release-folder, list-external-libraries, config-sdk-examples, config-example">

        <copy filtering="true" file="${Examples.MAIN_SRC_DESCRIPTOR}" tofile="${Examples.MAIN_RELEASE_DESCRIPTOR}"/>

        <replace file="${Examples.MAIN_RELEASE_DESCRIPTOR}" token="APPLICATION_XMLNS" value="http://ns.adobe.com/air/application/${Examples.AIR_SDK_VERSION}" />
        <replace file="${Examples.MAIN_RELEASE_DESCRIPTOR}" token="APPLICATION_NATIVE_EXTENSION_TAG" value="&lt;extensionID&gt;${Extension.ID}&lt;/extensionID&gt;" />
        
        <replace file="${Examples.MAIN_RELEASE_DESCRIPTOR}">
            <replacefilter token="APPLICATION_SWF"
                           value="${Examples.MAIN_SWF}"/>
        </replace>

        <if>
            <equals arg1="${Examples.ASC_VERSION}" arg2="2"/>
            <then>
                <java jar="${Flex.MXMLC}" fork="true" failonerror="true" maxmemory="256m">
                    <arg value="-debug=false"/>
                    <arg value="-load-config=${FLEX_HOME}/frameworks/air-config.xml"/>
                    <arg value="+flexlib=${FLEX_HOME}/frameworks"/>
                    <arg value="-advanced-telemetry=true"/>
                    <arg value="-external-library-path+=${aneFiles}"/>
                    <arg value="-library-path+=${swcFiles}"/>
                    <arg value="-source-path=${Examples.AS3_ROOT}"/>
                    <arg value="-file-specs=${Examples.MAIN_SRC_FILE}"/>
                    <arg value="-output=${Examples.RELEASE_ROOT}/${Examples.MAIN_SWF}"/>
                </java>
            </then>
            <else>
                <java jar="${Flex.MXMLC}" fork="true" failonerror="true" maxmemory="256m">
                    <arg value="-debug=false"/>
                    <arg value="-load-config=${FLEX_HOME}/frameworks/air-config.xml"/>
                    <arg value="+flexlib=${FLEX_HOME}/frameworks"/>
                    <arg value="-external-library-path+=${aneFiles}"/>
                    <arg value="-library-path+=${swcFiles}"/>
                    <arg value="-source-path=${Examples.AS3_ROOT}"/>
                    <arg value="-file-specs=${Examples.MAIN_SRC_FILE}"/>
                    <arg value="-output=${Examples.RELEASE_ROOT}/${Examples.MAIN_SWF}"/>
                </java>
            </else>
        </if>
    </target>

    <target name="unpack-native-extensions-release" depends="init-ant-contrib">
        <if>
            <equals arg1="${Examples.ASC_VERSION}" arg2="2"/>
            <then>
                <property name="excluded-library" value="${Extension.EXTENSION_NAME}" />
            </then>
            <else>
                <property name="excluded-library" value="${Extension.EXTENSION_NAME}-asc2" />
            </else>
        </if>
        <for param="nativeExtensionFile">
            <path>
                <fileset dir="${Extension.BIN_ROOT}" includes="**/*.ane" excludes="${excluded-library}.ane"/>
            </path>
            <sequential>
                <propertyregex override="yes" property="nativeExtensionBaseName" input="@{nativeExtensionFile}"
                               regexp=".*[\\/]+([^\.]*)\.ane" replace="\1"/>
                <unzip src="@{nativeExtensionFile}"
                       dest="${Examples.RELEASE_EXTENSIONS_ROOT}/${nativeExtensionBaseName}.ane"/>
            </sequential>
        </for>
    </target>

    <target name="run-release-swf" depends="compile-release-swf, init-ant-contrib, unpack-native-extensions-release" description="Runs the Sample.as in release mode">
        <if>
            <equals arg1="${isWindows}" arg2="true"/>
            <then>
                <property name="ADL" value="${FLEX_HOME}/bin/adl.exe"/>
            </then>
            <else>
                <property name="ADL" value="${FLEX_HOME}/bin/adl"/>
            </else>
        </if>

        <exec executable="${ADL}">
            <arg value="${Examples.MAIN_RELEASE_DESCRIPTOR}"/>
            <arg value="-extdir"/>
            <arg value="${Examples.RELEASE_EXTENSIONS_ROOT}"/>
            <arg value="${Examples.RELEASE_ROOT}"/>
        </exec>
    </target>

    <target name="create-standalone-application" depends="compile-release-swf, init-ant-contrib" description="Creates a captive runtime version of Sample.as">
    	<antcall target="generate-examples-certificate" />
        <if>
            <equals arg1="${isWindows}" arg2="true"/>
            <then>
                <property name="STANDALONE_EXTENSION" value=".exe"/>
            </then>
            <else>
                <property name="STANDALONE_EXTENSION" value=".app"/>
            </else>
        </if>
        <copy filtering="true" file="${Examples.MAIN_SRC_DESCRIPTOR}" tofile="${Examples.MAIN_RELEASE_DESCRIPTOR}"/>
        <java jar="${Flex.ADT}" fork="true" failonerror="true">
            <arg value="-package"/>
            <arg value="-storetype"/>
            <arg value="pkcs12"/>
            <arg value="-keystore"/>
            <arg value="${Examples.AIR_CERTIFICATE_ROOT}/${Examples.AIR_CERTIFICATE_FILE}"/>
            <arg value="-storepass"/>
            <arg value="${Examples.AIR_CERTIFICATE_PASSWORD}"/>
            <arg value="-target"/>
            <arg value="bundle"/>
            <arg value="${Examples.RELEASE_ROOT}/${Examples.MAIN_NAME}${STANDALONE_EXTENSION}"/>
            <arg value="${Examples.MAIN_RELEASE_DESCRIPTOR}"/>
            <arg value="-extdir"/>
            <arg value="${Extension.BIN_ROOT}"/>
            <arg value="-C"/>
            <arg value="${Examples.RELEASE_ROOT}"/>
            <arg value="${Examples.MAIN_SWF}"/>
        </java>
    </target>
</project>